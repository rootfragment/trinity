# kernel_list Kernel Module

This Linux kernel module creates a `/proc` entry that lists all currently running processes from the kernel’s perspective.  
It demonstrates how to extend the `/proc` filesystem to expose process information directly from the kernel.

---

## Features
- Creates a file at **`/proc/kernel_list`** when loaded.  
- When read, it outputs information about every process:  
  - **PID**: Process ID  
  - **PPID**: Parent Process ID  
  - **COMM**: Name of the process (command)  
  - **STATE**: Current internal process state  
- Removes the `/proc` entry when unloaded.  

---

## Core Functionality

### 1. Process Traversal (`show_task`)
- Uses the kernel macro **`for_each_process`** to iterate over all processes.  
- Each process’s details are written to the `/proc` file using **`seq_printf`**.  
- Protected with **`rcu_read_lock()`** and **`rcu_read_unlock()`** to ensure safe access to process structures.  

### 2. Proc File Open (`task_open`)
- Implements the open operation for the `/proc/kernel_list` file.  
- Relies on **`single_open`** to associate the file with the `show_task` function.  

### 3. Proc File Operations (`myops`)
Defines how the `/proc` file behaves:  
- **proc_open**: Calls `task_open` when the file is opened.  
- **proc_read**: Handles sequential reads via `seq_read`.  
- **proc_lseek**: Allows seeking within the file.  
- **proc_release**: Cleans up once reading is finished.  

### 4. Module Initialization (`log_init`)
- Creates the `/proc/kernel_list` entry using **`proc_create`**.  
- Prints kernel log messages confirming successful load and path.  

### 5. Module Cleanup (`log_exit`)
- Removes the `/proc/kernel_list` entry using **`proc_remove`**.  
- Prints a log message when the module is unloaded.  

---
